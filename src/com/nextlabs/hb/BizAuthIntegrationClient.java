/** *  */package com.nextlabs.hb;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.Serializable;import java.net.URLDecoder;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.StringTokenizer;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.hsqldb.persist.HsqlProperties;import org.hsqldb.server.Server;import org.hsqldb.server.ServerAcl.AclFormatException;import com.bluejungle.framework.comp.ComponentInfo;import com.bluejungle.framework.comp.ComponentManagerFactory;import com.bluejungle.framework.comp.LifestyleType;import com.bluejungle.framework.heartbeat.HeartbeatManagerImpl;import com.bluejungle.framework.heartbeat.IHeartbeatManager;import com.bluejungle.framework.heartbeat.ServerHeartbeatManagerImpl;import com.bluejungle.framework.utils.SerializationUtils;import com.bluejungle.pf.domain.destiny.serviceprovider.IHeartbeatServiceProvider;import com.nextlabs.hb.helper.AuthorityInsert;import com.nextlabs.hb.helper.CCLCountryInsert;import com.nextlabs.hb.helper.HSQLHelper;import com.nextlabs.hb.helper.IPMappingInsert;import com.nextlabs.hb.helper.PluginConstants;import com.nextlabs.hb.helper.PropertyLoader;import com.nextlabs.hb.helper.UserInsert;import com.nextlabs.hb.helper.Utils;/** *  * @author skaranam *  *  */public class BizAuthIntegrationClient implements IHeartbeatServiceProvider {	private static final Log log = LogFactory			.getLog(BizAuthIntegrationClient.class);	private ClassLoader classLoader = getClass().getClassLoader();	private HSQLHelper hsqlHelper;	long lserviceCurrentTime;	/*	 * 	 * (non-Javadoc)	 * 	 * 	 * 	 * @see	 * 	 * com.bluejungle.framework.heartbeat.IHeartbeatListener#prepareRequest(	 * 	 * java.lang.String)	 */	@Override	public Serializable prepareRequest(String name) {		HashMap<String, Object> map = new HashMap();		map.put("date", hsqlHelper.getTimeStamp());		log.info(name + " :: Preparing Request: new Date()" + map);		lserviceCurrentTime = System.nanoTime();		return (Serializable) map;	}	/*	 * public void processResponse(String paramString1, String paramString2){	 * 	 * processResponse(paramString1, (Serializable)paramString2);	 * 	 * }	 */	/*	 * 	 * (non-Javadoc)	 * 	 * 	 * 	 * @see	 * 	 * com.bluejungle.framework.heartbeat.IHeartbeatListener#processResponse	 * 	 * (java.lang.String, java.io.Serializable)	 */	public void processResponse(String name, Serializable response) {		log.debug("BizAuthClient request response time check  Time spent: "				+ ((System.nanoTime() - lserviceCurrentTime) / 1000000.00) + "ms");		long lCurrentTime = System.nanoTime();		HashMap<String, Object> data = (HashMap<String, Object>) response;		log.info("Response from Server:");		HashMap<String, String> map = (HashMap<String, String>) data				.get("MESG");		log.info("BizAuthIntgPlugin - Response message from server = " + map);		if (data.get("DATA") != null && checkFilesModified(map)) {			byte[] bytes = (byte[]) data.get("DATA");			String path = PluginConstants.INSTALL_LOC + PluginConstants.PC_ROOT					+ PluginConstants.JAR_FOLDER + PluginConstants.APP_FOLDER					+ PluginConstants.COMPRESSEDDATA;			String extractTo = PluginConstants.INSTALL_LOC					+ PluginConstants.PC_ROOT + PluginConstants.JAR_FOLDER					+ PluginConstants.APP_FOLDER;			File file = new File(path);			try {				FileOutputStream fos = new FileOutputStream(file);				fos.write(bytes);				fos.close();			} catch (IOException e) {				log.error(						"Exception in writing the compressed response to the file:",						e);			}			bytes = null;			Utils.UncompressFiles(extractTo, file);			log.info(" Insertion starts setting ISSTALE flag true");			hsqlHelper.updateIsStale("true");			log.info("BizAuth License Insertion starts");			if (map.get(PluginConstants.BIZAUTHLICENSE).equals(					PluginConstants.SUCCESS)) {				HashMap<String, ArrayList<HashMap<String, String>>> authorityData = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils						.readData(extractTo + "/"								+ PluginConstants.AUTHORITYDATAFILENAME);				AuthorityInsert ai = new AuthorityInsert(authorityData);				ai.insertData();				ai = null;				authorityData = null;			} else {				log.debug(map.get(PluginConstants.BIZAUTHLICENSE));			}			log.info("BizAuth License Insertion ends\nUser data insertion starts");			if (map.get(PluginConstants.USERDATA).equals(PluginConstants.SUCCESS)) {				new UserInsert().truncateTable();				HashMap<String, ArrayList<HashMap<String, String>>> userData = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils						.readData(extractTo + "/"								+ PluginConstants.USERDATAFILENAME);				UserInsert ui = new UserInsert(userData);				ui.insertData();				ui = null;				userData = null;			} else {				log.debug(map.get(PluginConstants.USERDATA));			}			if (map.get(PluginConstants.CCLCOUNTRIESDATA).equals(					PluginConstants.SUCCESS)) {				HashMap<String, ArrayList<HashMap<String, String>>> cclData = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils						.readData(extractTo + "/"								+ PluginConstants.CCLCOUNTRIESFILENAME);				// log.info("The CCL Data" + cclData);				CCLCountryInsert ccl = new CCLCountryInsert(cclData);				ccl.insertCCLCountries();				ccl = null;				cclData = null;			} else {				log.debug(map.get(PluginConstants.CCLCOUNTRIESDATA));			}			if (map.get(PluginConstants.IPMAPPING).equals(PluginConstants.SUCCESS)) {				HashMap<String, ArrayList<HashMap<String, String>>> ipmdata = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils						.readData(extractTo + "/"								+ PluginConstants.IPMAPPINGFILENAME);				IPMappingInsert ipm = new IPMappingInsert(ipmdata);				ipm.insertData();				ipm = null;				ipmdata = null;			} else {				log.debug(map.get(PluginConstants.IPMAPPING));			}			hsqlHelper.updateTimeStamp();			log.info(" All records inserted setting ISSTALE flag false");			hsqlHelper.updateIsStale("false");		}		else		{			log.warn("No Update from the HeartBeat Plugin");		}		data = null;		log.debug("BizAuthClient Process response() completed.  Time spent: "				+ ((System.nanoTime() - lCurrentTime) / 1000000.00) + "ms");		System.gc();	}	private boolean checkFilesModified(HashMap<String, String> map) {		boolean binFilesModified = false;		Iterator<String> iterator = map.keySet().iterator();		while (iterator.hasNext()) {			String key = iterator.next();			if (map.get(key).equals(PluginConstants.SUCCESS)) {				binFilesModified = true;				break;			}		}		return binFilesModified;	}	/**	 * 	 * (non-Javadoc)	 * 	 * 	 * 	 * @see com.bluejungle.pf.domain.destiny.serviceprovider.IServiceProvider#init()	 */	@SuppressWarnings("deprecation")	@Override	public void init() throws Exception {		log.info("BizAuthIntgPlugin - initializing");		// Register the plugin		ComponentInfo<ServerHeartbeatManagerImpl> heartbeatinfo = new ComponentInfo<ServerHeartbeatManagerImpl>(				IHeartbeatManager.class.getName(),				HeartbeatManagerImpl.class.getName(),				IHeartbeatManager.class.getName(), LifestyleType.SINGLETON_TYPE);		IHeartbeatManager heartbeatManager = (IHeartbeatManager) ComponentManagerFactory				.getComponentManager().getComponent(heartbeatinfo);		heartbeatManager.register(PluginConstants.NAME, this);		PluginConstants.INSTALL_LOC = findInstallFolder();		PluginConstants.COMMON_PROPS = PropertyLoader				.loadProperties(PluginConstants.INSTALL_LOC						+ PluginConstants.PC_ROOT + PluginConstants.JAR_FOLDER						+ PluginConstants.APP_FOLDER + "/Common_HB.Properties");		PluginConstants.PLUGIN_PROPS = PropertyLoader				.loadProperties(PluginConstants.INSTALL_LOC						+ PluginConstants.PC_ROOT + PluginConstants.CONF_FOLDER						+ "/BizAuthIntegrationClient_HB.properties");		// Start in-memory database		try {			String path = PluginConstants.INSTALL_LOC + PluginConstants.PC_ROOT					+ PluginConstants.JAR_FOLDER + PluginConstants.APP_FOLDER					+ PluginConstants.DATA_FOLDER;			log.info(path);			startInmemoryDB(path, PluginConstants.PC_INMEM_DB);		} catch (Exception e) {			log.error("Error while starting in-memory database", e);		}		hsqlHelper = new HSQLHelper(				PluginConstants.COMMON_PROPS.getProperty("hsql_server_url"),				PluginConstants.COMMON_PROPS.getProperty("hsql_user_name"),				PluginConstants.COMMON_PROPS.getProperty("hsql_password"));		log.info("BizAuthIntgPlugin - initialized");	}	/* This method use to find the root install folder of the policy server */	private static String OS = null;		public static String getOsName() {		if (OS == null) {			OS = System.getProperty("os.name");		}		return OS;	}	public static boolean isWindows() {		return getOsName().startsWith("Windows");	}	public static String findInstallFolder() {		String path = BizAuthIntegrationClient.class.getProtectionDomain().getCodeSource().getLocation().getPath();		try {			path = URLDecoder.decode(path, "UTF-8");		} catch (Exception e) {			log.error(String.format("Exception while decoding the path: %s", path), e);		}		int endIndex = path.indexOf("jservice/jar");		if (endIndex < 0) {			 endIndex = path.indexOf("build/classes");		}		log.info("Prop PATH: " + path);		if (isWindows()) {			path = path.substring(1, endIndex);		} else {			path = path.substring(0, endIndex);		}		return path;	}	private void startInmemoryDB(String path, String dbName)			throws IOException, AclFormatException {		HsqlProperties p = new HsqlProperties();		p.setProperty("server.database.0", "file:/" + path + dbName);		p.setProperty("server.dbname.0", dbName);		System.out.println(dbName);		// p.setProperty("log_data", false);		// set up the rest of properties, if needed any		Server server = new Server();		server.setProperties(p);		server.setLogWriter(null); // can use custom writer		server.setErrWriter(null); // can use custom writer		server.start();	}	public static void main(String args[]) throws Exception {		/*		 * BizAuthIntegrationClient bc= new BizAuthIntegrationClient(); bc.init();		 */		HashMap<String, String> enrollmentClockidMapping = new HashMap<String, String>();		String enrollment_Clockid = "sid:s;uid:clockuid";		StringTokenizer enrollment_clockid_tokens = new StringTokenizer(enrollment_Clockid, ";");		while (enrollment_clockid_tokens.hasMoreTokens()) {			String token = enrollment_clockid_tokens.nextToken();			System.out.println("MERGEFIX Enrollment_clockid token: " + token);			if (token.contains(":") && token.indexOf(":") < (token.length() - 1)) {				String[] enrollment_clockid_arr = token.split(":");				enrollmentClockidMapping.put(enrollment_clockid_arr[0], enrollment_clockid_arr[1]);			}		}		System.out.println("MERGEFIX enrollmentClockidMapping: " + enrollmentClockidMapping);	}	public void processResponse(String name, String data) {		if (data != null) {			processResponse(name, SerializationUtils.unwrapSerialized(data, this.classLoader));		} else {			log.warn("Data is null: No Update from the HeartBeat Plugin");		}	}}