/** *  */package com.nextlabs.hb;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.Serializable;import java.lang.ref.WeakReference;import java.net.URLDecoder;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.WeakHashMap;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.bluejungle.destiny.container.dcc.plugin.IDCCHeartbeatServerPlugin;import com.bluejungle.destiny.server.shared.registration.IRegisteredDCCComponent;import com.bluejungle.framework.comp.ComponentInfo;import com.bluejungle.framework.comp.ComponentManagerFactory;import com.bluejungle.framework.comp.LifestyleType;import com.bluejungle.framework.crypt.IDecryptor;import com.bluejungle.framework.crypt.IEncryptor;import com.bluejungle.framework.crypt.ReversibleEncryptor;import com.bluejungle.framework.heartbeat.IServerHeartbeatManager;import com.bluejungle.framework.heartbeat.ServerHeartbeatManagerImpl;import com.bluejungle.framework.utils.CryptUtils;import com.bluejungle.framework.utils.SerializationUtils;import com.nextlabs.hb.helper.AuthorityData;import com.nextlabs.hb.helper.CCLCountryData;import com.nextlabs.hb.helper.DictionaryData;import com.nextlabs.hb.helper.IPMappingData;import com.nextlabs.hb.helper.MSSQLHelper;import com.nextlabs.hb.helper.PluginConstants;import com.nextlabs.hb.helper.PropertyLoader;import com.nextlabs.hb.helper.Utils;/** *  * @author skaranam *  *  */public class BizAuthIntegrationServer implements IDCCHeartbeatServerPlugin {	private static final Log log = LogFactory			.getLog(BizAuthIntegrationServer.class);	private static String CCLHASH = "";	private static String IPMAPPINGHASH = "";	private static long CCLHASH_TS = 0;	private ClassLoader classLoader = getClass().getClassLoader();	private static long IPMAPPINGHASH_TS = 0;	/*	 * 	 * This method intializes and register the component to the server to	 * 	 * service as a heartbeat plugin.	 * 	 * 	 * 	 * @see	 * 	 * com.bluejungle.destiny.container.dcc.plugin.IDCCServerPlugin#init(com	 * 	 * .bluejungle.destiny.server.shared.registration.IRegisteredDCCComponent)	 */	@Override	public void init(IRegisteredDCCComponent component) {		log.info("BizAuthIntgPlugin -- initializing");		try {			PluginConstants.INSTALL_LOC = findInstallFolder();			// Load properties			PluginConstants.COMMON_PROPS = PropertyLoader					.loadProperties(PluginConstants.INSTALL_LOC							+ PluginConstants.CC_ROOT							+ PluginConstants.JAR_FOLDER							+ PluginConstants.APP_FOLDER							+ "/Common_HB.Properties");			PluginConstants.PLUGIN_PROPS = PropertyLoader					.loadProperties(PluginConstants.INSTALL_LOC							+ PluginConstants.CC_ROOT							+ PluginConstants.CONF_FOLDER							+ "/BizAuthIntegrationServer_HB.properties");			prepareData(new HashMap());			// Register the plugin with appropriate component			ComponentInfo<ServerHeartbeatManagerImpl> heartbeatManagerComp = new ComponentInfo<ServerHeartbeatManagerImpl>(					IServerHeartbeatManager.COMP_NAME,					ServerHeartbeatManagerImpl.class,					IServerHeartbeatManager.class, LifestyleType.SINGLETON_TYPE);			IServerHeartbeatManager heartbeatMgr = ComponentManagerFactory					.getComponentManager().getComponent(heartbeatManagerComp);			heartbeatMgr.register(PluginConstants.NAME, this);			log.info("BizAuthIntgPlugin -- registered by component :"					+ component.getComponentName());			log.info("BizAuthIntgPlugin -- initialized");		} catch (Throwable t) {			log.error("Error while initializing the BizAuthHearbeatServer ", t);		}	}	/*	 * 	 * This method returns the request to the client.	 * 	 * 	 * 	 * @see	 * 	 * com.bluejungle.framework.heartbeat.IHeartbeatProvider#serviceHeartbeatRequest	 * 	 * (java.lang.String, java.io.Serializable)	 */	public Serializable serviceHeartbeatRequest(String name, Serializable data) {		if (!name.equals(PluginConstants.NAME))			return null;		log.info("BizAuthIntgPlugin -- request from client : " + data);		HashMap<String, Object> request = (HashMap<String, Object>) data;		return prepareData(request);	}	/* This method use to prepare a response for the client request */	public Serializable prepareData(Map request) {		long lCurrentTime = System.nanoTime();		HashMap<String, Object> response = new HashMap<String, Object>();		HashMap<String, String> responseMesg = new HashMap<String, String>();		HashMap<String, HashMap<String, ArrayList<HashMap<String, String>>>> responseData = new HashMap<String, HashMap<String, ArrayList<HashMap<String, String>>>>();		if (MSSQLHelper.getInstance().lockAuthorityControlTable()) {			boolean isAuthorityDataChanged = false;			AuthorityData ad = new AuthorityData();			Date requestDate = (Date) request.get("date");			HashMap<String, ArrayList<HashMap<String, String>>> data = ad					.getData(requestDate);			log.info("Authority Data Modifications:");			if (data != null) {				responseData.put(PluginConstants.BIZAUTHLICENSE, data);				responseMesg.put(PluginConstants.BIZAUTHLICENSE,						PluginConstants.SUCCESS);				isAuthorityDataChanged = ad.isWriteHappened;				log.info("Inside Authority Data isauthoritychanged: " + isAuthorityDataChanged);			} else {				responseData						.put(PluginConstants.BIZAUTHLICENSE,								new HashMap<String, ArrayList<HashMap<String, String>>>());				responseMesg.put(PluginConstants.BIZAUTHLICENSE,						ad.getErrorMessage());			}			IPMappingData ipMappingData = new IPMappingData();			HashMap<String, ArrayList<HashMap<String, String>>> ipmdata = ipMappingData					.getData();			if (ipmdata != null) {				String currIpHash = prepareHash(ipmdata.toString());				if (!IPMAPPINGHASH.equals(currIpHash) || isAuthorityDataChanged) {					responseData.put(PluginConstants.IPMAPPING, ipmdata);					responseMesg.put(PluginConstants.IPMAPPING,							PluginConstants.SUCCESS);					IPMAPPINGHASH = currIpHash;					IPMAPPINGHASH_TS = System.currentTimeMillis();				} else {					if (requestDate != null && IPMAPPINGHASH_TS > requestDate.getTime()) {						responseData.put(PluginConstants.IPMAPPING, ipmdata);						responseMesg.put(PluginConstants.IPMAPPING,								PluginConstants.SUCCESS);					} else {						responseData								.put(PluginConstants.IPMAPPING,										new HashMap<String, ArrayList<HashMap<String, String>>>());						responseMesg.put(PluginConstants.IPMAPPING,								PluginConstants.NOUPDATE);					}				}			} else {				responseData						.put(PluginConstants.IPMAPPING,								new HashMap<String, ArrayList<HashMap<String, String>>>());				responseMesg.put(PluginConstants.IPMAPPING,						ipMappingData.getErrorMessage());			}			if (ad.getJurisdictionClassifications() == null					|| ad.getJuciCodeAuthorityIdMapping() == null					|| ad.getIlnoAuthoritiyIDMapping() == null) {				ad.prepareCCLBuildingData();			}			CCLCountryData cclCountryData = new CCLCountryData();			HashMap<String, ArrayList<HashMap<String, String>>> ccldata = cclCountryData					.getData();			if (ccldata != null) {				String currCclHash = prepareHash(ccldata.toString());				if (!CCLHASH.equals(currCclHash) || isAuthorityDataChanged) {					responseData.put(PluginConstants.CCLCOUNTRIESDATA, ccldata);					responseMesg.put(PluginConstants.CCLCOUNTRIESDATA,							PluginConstants.SUCCESS);					CCLHASH = currCclHash;					CCLHASH_TS = System.currentTimeMillis();				} else {					if (requestDate != null && CCLHASH_TS > requestDate.getTime()) {						responseData.put(PluginConstants.CCLCOUNTRIESDATA, ccldata);						responseMesg.put(PluginConstants.CCLCOUNTRIESDATA,								PluginConstants.SUCCESS);					} else {						responseData								.put(PluginConstants.CCLCOUNTRIESDATA,										new HashMap<String, ArrayList<HashMap<String, String>>>());						responseMesg.put(PluginConstants.CCLCOUNTRIESDATA,								PluginConstants.NOUPDATE);					}				}			} else {				responseData						.put(PluginConstants.CCLCOUNTRIESDATA,								new HashMap<String, ArrayList<HashMap<String, String>>>());				responseMesg.put(PluginConstants.CCLCOUNTRIESDATA,						cclCountryData.getErrorMessage());			}			// PWC F2PE65347A fix starts			log.info("isauthoritychanged: " + isAuthorityDataChanged);			if (isAuthorityDataChanged) {				String userDataFilePath = PluginConstants.INSTALL_LOC + PluginConstants.CC_ROOT						+ PluginConstants.JAR_FOLDER + PluginConstants.APP_FOLDER + PluginConstants.DATA_FOLDER						+ PluginConstants.USERDATAFILENAME;				File file = new File(userDataFilePath);				if (file.exists()) {					file.delete();				}			}			// PWC F2PE65347A fix ends			DictionaryData dd = new DictionaryData(					ad.getIlnoAuthoritiyIDMapping());			HashMap<String, ArrayList<HashMap<String, String>>> dddata = dd					.getData((Date) request.get("date"));			if (dddata != null) {				responseData.put(PluginConstants.USERDATA, dddata);				responseMesg.put(PluginConstants.USERDATA,						PluginConstants.SUCCESS);			} else {				responseData						.put(PluginConstants.USERDATA,								new HashMap<String, ArrayList<HashMap<String, String>>>());				responseMesg						.put(PluginConstants.USERDATA, dd.getErrorMessage());			}			// Make nulls			// ad = null;			MSSQLHelper.getInstance().unlockAuthorityControlTable();			if (checkFilesModified(responseMesg)) {				String zipFile = PluginConstants.INSTALL_LOC						+ PluginConstants.CC_ROOT + PluginConstants.JAR_FOLDER						+ PluginConstants.APP_FOLDER + PluginConstants.DATA_FOLDER						+ PluginConstants.COMPRESSEDDATA;				List<String> zipEntries = new ArrayList<String>();				zipEntries.add(ad.getFilePath());				zipEntries.add(ipMappingData.getFilePath());				zipEntries.add(cclCountryData.getFilePath());				zipEntries.add(dd.getFilePath());				Utils.compressFiles(zipEntries, zipFile);				byte[] bytes = null;				try {					File file = new File(zipFile);					InputStream is = new FileInputStream(zipFile);					int offset = 0;					int numRead = 0;					bytes = new byte[(int) file.length()];					while (offset < bytes.length							&& (numRead = is.read(bytes, offset, bytes.length									- offset)) >= 0) {						offset += numRead;					}					is.close();					file.delete();				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				response.put("DATA", bytes);				response.put("MESG", responseMesg);				bytes = null;				data = null;				ccldata = null;				ipmdata = null;				dddata = null;			} else {				response.put("DATA", null);				response.put("MESG", responseMesg);			}		} else {			byte[] bytes = null;			response.put("DATA", bytes);			responseMesg.put(PluginConstants.BIZAUTHLICENSE,					PluginConstants.BIZAUTHDATALOCKED);			responseMesg.put(PluginConstants.IPMAPPING,					PluginConstants.BIZAUTHDATALOCKED);			responseMesg.put(PluginConstants.CCLCOUNTRIESDATA,					PluginConstants.BIZAUTHDATALOCKED);			responseMesg.put(PluginConstants.USERDATA,					PluginConstants.BIZAUTHDATALOCKED);			response.put("MESG", responseMesg);		}		System.gc();		log.debug("The Response message of the server :" + responseMesg);		log.debug("BizAuth Server prepareresponse() completed. Result: Time spent: "				+ ((System.nanoTime() - lCurrentTime) / 1000000.00) + "ms");		return (Serializable) response;	}	/* This method use to find the root install folder of the policy server */	private String findInstallFolder() {		String path = this.getClass().getProtectionDomain().getCodeSource()				.getLocation().getPath();		try {			path = URLDecoder.decode(path, "UTF-8");		} catch (Exception e) {			log.error("Exeception while decoding the path:", e);		}		int endIndex = path.indexOf("/server/plugins");		path = path.substring(1, endIndex);		return path;	}	private boolean checkFilesModified(HashMap<String, String> map) {		boolean binFilesModified = false;		Iterator<String> iterator = map.keySet().iterator();		while (iterator.hasNext()) {			String key = iterator.next();			if (map.get(key).equals(PluginConstants.SUCCESS)) {				binFilesModified = true;				break;			}		}		return binFilesModified;	}	private String prepareHash(String input) {		String result = null;		try {			byte[] bytesOfMessage = input.getBytes("UTF-8");			MessageDigest md = MessageDigest.getInstance("MD5");			byte[] thedigest = md.digest(bytesOfMessage);			StringBuilder sb = new StringBuilder(2 * thedigest.length);			for (byte b : thedigest) {				sb.append(String.format("%02x", b & 0xff));			}			result = sb.toString();		} catch (Exception ee) {			result = String.valueOf(input.hashCode());		}		return result;	}	public static void main(String args[]) {		IDecryptor decryptor = new ReversibleEncryptor();	decryptor.decrypt("s7e903b164eaa77e67ce248b0920038b3");				IEncryptor encryptor=new ReversibleEncryptor();				System.out.println(encryptor.encrypt("123next!"));		// le file=new File("C:");		/*		 * File[] files = new File(		 * "C:/Program Files/NextLabs/Policy Server/server/plugins/jar/utc/data/")		 * .listFiles();		 * 		 * for (File file : files) { if (file.isDirectory()) {		 * System.out.println("Directory: " + file.getName()); //		 * showFiles(file.listFiles()); // Calls same method again. } else {		 * System.out.println("File: " + file.getName()); } }		 */		/*		 * HashMap<String, Object> map = new HashMap();		 * 		 * map.put("date", new Date());		 * 		 * PluginConstants.PLUGIN_PROPS = PropertyLoader		 * 		 * .loadProperties(PluginConstants.PC_ROOT		 * 		 * + PluginConstants.CONF_FOLDER		 * 		 * + "/BizAuthIntegrationServer_HB.properties");		 * 		 * PluginConstants.COMMON_PROPS = PropertyLoader		 * 		 * .loadProperties(PluginConstants.PC_ROOT		 * 		 * + PluginConstants.CONF_FOLDER + "/Common_HB.properties");		 */		// new BizAuthIntegrationServer().prepareData(map);	}	public Serializable serviceHeartbeatRequest(String name, String data) {		log.info("input parameter name " + name);		// log.info("input parameter data:" + data);		log.info("input parameter data length:" + data.length());		if (!name.equals("BizAuthIntgPlugin")) {			return null;		}		HashMap localHashMap = new HashMap();		localHashMap = (HashMap) SerializationUtils.unwrapSerialized(data, this.classLoader);		log.info("input request:" + localHashMap);		return prepareData(localHashMap);	}}