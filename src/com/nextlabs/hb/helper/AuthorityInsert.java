package com.nextlabs.hb.helper;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class AuthorityInsert {	private static final Log log = LogFactory.getLog(AuthorityInsert.class);	private HSQLHelper hsqlHelper;	HashMap<String, ArrayList<HashMap<String, String>>> responseData;	public AuthorityInsert(			HashMap<String, ArrayList<HashMap<String, String>>> responseData) {		this.responseData = responseData;		hsqlHelper = new HSQLHelper(				PluginConstants.COMMON_PROPS.getProperty("hsql_server_url"),				PluginConstants.COMMON_PROPS.getProperty("hsql_user_name"),				PluginConstants.COMMON_PROPS.getProperty("hsql_password"),				PluginConstants.COMMON_PROPS.getProperty("BizAuthDateFormat"));	}	public void insertData() {		truncateTable();		insertJucrisdictionClassification();		insertAuthorityData();		insertChildTables(				PluginConstants.COMMON_PROPS.getProperty("table_acm"),				PluginConstants.COMMON_PROPS						.getProperty("acm_col_Characteristich"));		insertChildTables(				PluginConstants.COMMON_PROPS.getProperty("table_arm"),				PluginConstants.COMMON_PROPS.getProperty("arm_col_Resource"));		insertChildTables(				PluginConstants.COMMON_PROPS.getProperty("table_afsm"),				PluginConstants.COMMON_PROPS						.getProperty("afsm_col_ForeignConsignee"));		insertChildTables(				PluginConstants.COMMON_PROPS.getProperty("table_aim"),				PluginConstants.COMMON_PROPS.getProperty("au_col_ItemNo"));		insertChildTables(				PluginConstants.COMMON_PROPS.getProperty("table_actm"),				PluginConstants.COMMON_PROPS						.getProperty("actm_col_CountryCode"));		insertAuthorisedUsers();		log.info("I am out of insertData");		System.gc();	}	private void truncateTable() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize("");		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_acm"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_afsm"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_arm"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_aim"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_actm"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_aaum"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_au"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_jcm"));		hsqlHelper.truncatetables(iqh);	}	private void insertJucrisdictionClassification() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_jcm"));		ArrayList<HashMap<String, String>> authoritydata = responseData.get(iqh				.getTableName());		if (authoritydata != null) {			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("jcm_col_JuCICode"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("jcm_col_Jurisdiction"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("jcm_col_Classification"));			iqh.prepareQuery();			hsqlHelper.insertData(iqh, authoritydata);			authoritydata = null;		}	}	private void insertAuthorityData() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_au"));		ArrayList<HashMap<String, String>> authoritydata = responseData.get(iqh				.getTableName());		if (authoritydata != null) {			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_AuthorityId"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_AuthorityType"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_InternalLicenseNo"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_OfficialLicenseNo"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_LicenseStatus"));			iqh.getFieldList()					.add(PluginConstants.COMMON_PROPS							.getProperty("au_col_JuCICode"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS.getProperty("au_col_Scope"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS.getProperty("au_col_SME"));			iqh.getFieldList()					.add(PluginConstants.COMMON_PROPS							.getProperty("au_col_Platform"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS.getProperty("au_col_Model"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_StartDate"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS.getProperty("au_col_EndDate"));			iqh.prepareQuery();			hsqlHelper.insertDataWithDate(iqh, authoritydata);			authoritydata = null;		}	}	private void insertChildTables(String tableName, String Attribute) {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(tableName);		ArrayList<HashMap<String, String>> authoritydata = responseData.get(iqh				.getTableName());		if (authoritydata != null) {			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_AuthorityId"));			iqh.getFieldList().add(Attribute);			iqh.prepareQuery();			hsqlHelper.insertData(iqh, authoritydata);			authoritydata = null;		}	}	private void insertAuthorisedUsers() {		ArrayList<HashMap<String, String>> userData = responseData				.get(PluginConstants.COMMON_PROPS.getProperty("table_aaum"));		if (userData != null) {			hsqlHelper.insertAuthorisedUsers(userData);			userData = null;		}		log.info("I am out of authorized users insertion");	}	public static void main(String args[]) {/*BizAuthIntegrationClient bc=new											 * BizAuthIntegrationClient();											 * 											 * try {											 * 											 * bc.init();											 * 											 * String extractTo =											 * PluginConstants.INSTALL_LOC											 * 											 * + PluginConstants.PC_ROOT +											 * PluginConstants.JAR_FOLDER											 * 											 * + PluginConstants.APP_FOLDER;											 * 											 * System.out.println(extractTo);											 * 											 * AuthorityInsert ai=new											 * AuthorityInsert((HashMap<String,											 * ArrayList<HashMap<String,											 * String>>>) Utils											 * 											 * .readData(extractTo + "/"											 * 											 * +											 * PluginConstants.AUTHORITYDATAFILENAME											 * ));											 * 											 * System.out.println("Data REad");											 * 											 * ai.insertData();											 * 											 * System.out.println(											 * "ai insert completed");											 * 											 * UserInsert ui=new											 * UserInsert((HashMap<String,											 * ArrayList<HashMap<String,											 * String>>>) Utils											 * 											 * .readData(extractTo + "/"											 * 											 * +											 * PluginConstants.USERDATAFILENAME											 * ));											 * 											 * System.out.println("Data REad UI")											 * ;											 * 											 * ui.truncateTable();											 * 											 * ui.insertData();											 * 											 * CCLCountryInsert ci=new											 * CCLCountryInsert((HashMap<String,											 * ArrayList<HashMap<String,											 * String>>>) Utils											 * 											 * .readData(extractTo + "/"											 * 											 * +											 * PluginConstants.CCLCOUNTRIESFILENAME											 * ));											 * 											 * ci.insertCCLCountries();											 * 											 * Thread.sleep(60000);											 * 											 * } catch (Exception e) {											 * 											 * 											 * 											 * } */	}}