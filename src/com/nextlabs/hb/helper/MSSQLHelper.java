package com.nextlabs.hb.helper;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.sql.Timestamp;import java.text.MessageFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Set;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.bluejungle.framework.crypt.IDecryptor;import com.bluejungle.framework.crypt.ReversibleEncryptor;public class MSSQLHelper {	private static final Log LOG = LogFactory.getLog(MSSQLHelper.class);	private static MSSQLHelper _this = null;	/* The constructor is used to load the MSSQL classdrivers into the package */	private MSSQLHelper() {		try {			Class.forName(PluginConstants.PLUGIN_PROPS					.getProperty("sql_jdbc_driverclassname"));		} catch (Exception e) {			LOG.error("Unable to load DB Driver class: ", e);		}	}	public static MSSQLHelper getInstance() {		if (_this == null) {			_this = new MSSQLHelper();		}		return _this;	}	/* This method is to open a connection with the MSSQL database */	public Connection openConnection() {		Connection connection = null;		try {			IDecryptor decryptor = new ReversibleEncryptor();			connection = DriverManager					.getConnection(PluginConstants.PLUGIN_PROPS							.getProperty("sql_jdbc_connectionstring"),							PluginConstants.PLUGIN_PROPS									.getProperty("sql_jdbc_userid"), decryptor									.decrypt(PluginConstants.PLUGIN_PROPS											.getProperty("sql_jdbc_password")));			LOG.debug(" Connection Established with MSSQL");		} catch (SQLException e) {			LOG.error("MSSQLHelper openConnection error: ", e);		}		return connection;	}	/* Closes a connection with MSSQL */	private void closeConnection(Connection connection) {		try {			if (connection != null && !connection.isClosed())				connection.close();			LOG.info("Connection is closed:" + connection.isClosed());		} catch (SQLException e) {			LOG.error("MSSQLHelper closeConnection() error: ", e);		}	}	public Timestamp getLatestDBDate() {		Timestamp date = null;		Connection connection = openConnection();		if (connection != null) {			Statement stmt;			try {				stmt = connection.createStatement();				String message = "SELECT MAX({1}) FROM {2}";				Object[] args = {						PluginConstants.COMMON_PROPS								.getProperty("auct_sourcesystem"),						PluginConstants.COMMON_PROPS								.getProperty("auct_create_ts"),						PluginConstants.COMMON_PROPS.getProperty("table_auct") };				ResultSet result = stmt.executeQuery(MessageFormat.format(						message, args));				if (result.next())					date = result.getTimestamp(1);			} catch (SQLException e) {				LOG.warn("Unable to lock the table");				LOG.error("MSSQLHelper lockAuthorityControlTable() error: ", e);			} finally {				closeConnection(connection);			}		}		return date;	}	/* This method returns a boolean value indicating whether the Authority	 * 	 * Control table is locked by Client.If it is not locked by the client this	 * 	 * method locks the table for contolcenter plugin. false-table locked	 * 	 * byclient true-table locked by control center */	public boolean lockAuthorityControlTable() {		LOG.info("Inside Lock Authority Table");		boolean flag = true;		Connection connection = openConnection();		if (connection != null) {			Statement stmt;			try {				stmt = connection.createStatement();				String message = "SELECT {0},MAX({1}) FROM {2} GROUP BY {0}";				Object[] args = {						PluginConstants.COMMON_PROPS								.getProperty("auct_sourcesystem"),						PluginConstants.COMMON_PROPS								.getProperty("auct_create_ts"),						PluginConstants.COMMON_PROPS.getProperty("table_auct") };				String query = MessageFormat.format(message, args);				LOG.info("Inside Lock Authority Table: Select Query:"+query);				ResultSet result = stmt.executeQuery(MessageFormat.format(						message, args));				HashMap<String, String> map = new HashMap<String, String>();								while (result.next()) {					String SourceySstem, timestamp;					SourceySstem = result.getString(1);					timestamp = result.getString(2);					map.put(SourceySstem, timestamp);				}				result.close();				connection.setAutoCommit(false);				connection.commit();				Set<String> Keys = map.keySet();				String updateMessage = "UPDATE {2} SET {3}=''{4}'' WHERE {3}!=''{5}'' AND {0}=''{6}'' AND {1}=''{7}''";				if (null != PluginConstants.PLUGIN_PROPS						.getProperty("sql_jdbc_driverclassname")						&& PluginConstants.PLUGIN_PROPS.getProperty(								"sql_jdbc_driverclassname").contains("oracle")) {					updateMessage = "UPDATE {2} SET {3}=''{4}'' WHERE {0}=''{6}'' AND {1}=TO_TIMESTAMP(''{7}'',''YYYY-MM-DD HH24: MI:SS:FF'')";				}				LOG.info("Inside Lock Authority Table: resultmap:"+map);				for (String key : Keys) {					LOG.info(key + " " + map.get(key));					Object[] arguments = {							PluginConstants.COMMON_PROPS									.getProperty("auct_sourcesystem"),							PluginConstants.COMMON_PROPS									.getProperty("auct_create_ts"),							PluginConstants.COMMON_PROPS									.getProperty("table_auct"),							PluginConstants.COMMON_PROPS									.getProperty("auct_lockedby"),							PluginConstants.COMMON_PROPS									.getProperty("NextLabs_lock"),							PluginConstants.COMMON_PROPS									.getProperty("Client_Lock"), key,							map.get(key) };					String updateQuery = MessageFormat.format(updateMessage,							arguments);					LOG.info("Inside Lock Authority Table: updateQuery :"+updateQuery);					int count = stmt.executeUpdate(updateQuery);					LOG.info("After Executing the update:");					if (count == 0) {						connection.rollback();						LOG.warn("Unable to lock the table");						flag = false;						break;					}				}				connection.commit();			} catch (SQLException e) {				LOG.warn("Unable to lock the table");				LOG.error("MSSQLHelper lockAuthorityControlTable() error: ", e);				flag = false;			} finally {				closeConnection(connection);			}		}		LOG.info("Table Locked");		return flag;	}	public boolean unlockAuthorityControlTable() {		boolean flag = true;		Connection connection = openConnection();		if (connection != null) {			Statement stmt;			try {				stmt = connection.createStatement();				String lastReadTSQuery = "UPDATE {0} SET {3}=current_timestamp WHERE {1}=''{2}''";				Object[] lrtsargs = {						PluginConstants.COMMON_PROPS.getProperty("table_auct"),						PluginConstants.COMMON_PROPS								.getProperty("auct_lockedby"),						PluginConstants.COMMON_PROPS								.getProperty("NextLabs_lock"),						PluginConstants.COMMON_PROPS								.getProperty("auct_lastreadts") };				String lrtsupdateQuery = MessageFormat.format(lastReadTSQuery,						lrtsargs);				LOG.info("LastreadTSupdateQuery:" + lrtsupdateQuery);				int count = stmt.executeUpdate(lrtsupdateQuery);				if (count == 0)					flag = false;				String message = "UPDATE {0} SET {1}='''' WHERE {1}=''{2}''";				Object[] args = {						PluginConstants.COMMON_PROPS.getProperty("table_auct"),						PluginConstants.COMMON_PROPS								.getProperty("auct_lockedby"),						PluginConstants.COMMON_PROPS								.getProperty("NextLabs_lock") };				String updateQuery = MessageFormat.format(message, args);				LOG.info("updateQuery" + updateQuery);				count = stmt.executeUpdate(updateQuery);				if (count == 0)					flag = false;			} catch (SQLException e) {				LOG.error("MSSQLHelper unlockAuthorityControlTable() error: ",						e);				flag = false;			} finally {				closeConnection(connection);			}		}		return flag;	}	/* This method retrieves the data from the database */	public List<HashMap<String, String>> retrieveData(QueryResultHelper qrh) {		Connection connection = openConnection();		List<HashMap<String, String>> resultList = null;		if (connection != null) {			Statement stmt;			try {				stmt = connection.createStatement();				ResultSet result = stmt.executeQuery(qrh.getQuery());				resultList = new ArrayList<HashMap<String, String>>();				while (result.next()) {					resultList.add(getMap(result, qrh.getTableFieldList()));				}			} catch (SQLException e) {				LOG.error("MSSQLHelper retrieveData() error: ", e);				resultList = null;			} finally {				closeConnection(connection);			}		}		LOG.info("Data Retrieval is finished");		return resultList;	}	private HashMap<String, String> getMap(ResultSet result,			ArrayList<String> tableFieldList) throws SQLException {		HashMap<String, String> resultMap = new HashMap<String, String>();		for (String fieldName : tableFieldList) {			Object obj = result.getObject(fieldName);			if (obj != null)				resultMap.put(fieldName, obj.toString());		}		return resultMap;	}	/* This method is for general testing purpose */	public static void main(String[] args) {		IDecryptor decryptor = new ReversibleEncryptor();		System.out.println(decryptor				.decrypt("sa1f78f49e437288039751654ece96ede"));		/* try {		 * 		 * PluginConstants.COMMON_PROPS = PropertyLoader		 * 		 * .loadProperties(PluginConstants.PC_ROOT		 * 		 * + PluginConstants.CONF_FOLDER		 * 		 * + "/Common_HB.properties");		 * 		 * PluginConstants.PLUGIN_PROPS = PropertyLoader		 * 		 * .loadProperties(PluginConstants.PC_ROOT		 * 		 * + PluginConstants.CONF_FOLDER		 * 		 * + "/BizAuthIntegrationServer_HB.properties");		 * 		 * QueryResultHelper qrh = new QueryResultHelper();		 * 		 * qrh.setQuery("select count(*) from authoritycontrol where LockedBy='S'"		 * );		 * 		 * 		 * 		 * System.out.println(MSSQLHelper.getInstance().getLatestDBDate());		 * 		 * 		 * 		 * } catch (Exception e) {		 * 		 * //		 * 		 * e.printStackTrace();		 * 		 * } */}}