package com.nextlabs.hb.helper;import java.sql.Timestamp;import java.text.MessageFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.TreeMap;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class AuthorityData extends DataRetrival {	private static final Log log = LogFactory.getLog(AuthorityData.class);	public final String ILNO = PluginConstants.COMMON_PROPS			.getProperty("au_col_internallicenseno");	public final String AUTHORITYID = PluginConstants.COMMON_PROPS			.getProperty("au_col_AuthorityId");	public final String CLASSIFCIATION = PluginConstants.COMMON_PROPS			.getProperty("acy_col_classification");	public final String JURISDICTION = PluginConstants.COMMON_PROPS			.getProperty("au_col_jurisdiction");	private HashMap<String, HashMap<String, Integer>> jurisdictionClassificationMasterData = null;	private ArrayList<HashMap<String, String>> jurisdictionClassificationTable = null;	private TreeMap<String, ArrayList<String>> ilnoClassificationMapping = null;	private HashMap<String, ArrayList<Integer>> ilnoAuthoritiyIDMapping = null;	private HashMap<Integer, ArrayList<Integer>> juciCodeAuthorityIdMapping = null;	public HashMap<Integer, ArrayList<Integer>> getJuciCodeAuthorityIdMapping() {		return juciCodeAuthorityIdMapping;	}	public void setJuciCodeAuthorityIdMapping(			HashMap<Integer, ArrayList<Integer>> juciCodeAuthorityIdMapping) {		this.juciCodeAuthorityIdMapping = juciCodeAuthorityIdMapping;	}	/*	 * In this constructor we are intializing the filepath and updating the	 * 	 * islocked variable to true if the Bizauth db is locked for updating	 */	public AuthorityData() {		filePath = PluginConstants.INSTALL_LOC + PluginConstants.CC_ROOT				+ PluginConstants.JAR_FOLDER + PluginConstants.APP_FOLDER				+ PluginConstants.DATA_FOLDER				+ PluginConstants.AUTHORITYDATAFILENAME;	}	/* This method returns the last modeifed date of the BIZauth DB */	public Timestamp getLastModifiedDate() {		return MSSQLHelper.getInstance().getLatestDBDate();	}	/*	 * This method queries the authorities table in the bizauthdb and returns	 * 	 * the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getAuthorities() {		List<HashMap<String, String>> authorityData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS.getProperty("table_authority")));		qrh.setTableFieldList(getAuthorityFields());		authorityData = MSSQLHelper.getInstance().retrieveData(qrh);		return authorityData;	}	/*	 * This method builds the fields of authority table in a list and returns	 * 	 * that list	 */	private ArrayList<String> getAuthorityFields() {		ArrayList<String> list = new ArrayList<String>();		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_internallicenseno"));		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_officiallicenseno"));		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_sourcesystem"));		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_licensestatus"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_licensetype"));		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_jurisdiction"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_scope"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_sme"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_platform"));		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_jurisdiction"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_model"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_startdate"));		list.add(PluginConstants.COMMON_PROPS.getProperty("au_col_expirydate"));		return list;	}	/*	 * This method queries the authorities characteristics table in the	 * bizauthdb and returns the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getCharacteristics() {		List<HashMap<String, String>> characteristicData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_characteristics")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("ac_col_characteristics")));		characteristicData = MSSQLHelper.getInstance().retrieveData(qrh);		return characteristicData;	}	private ArrayList<String> getAuthorityChildTableFields(String field) {		ArrayList<String> list = new ArrayList<String>();		list.add(PluginConstants.COMMON_PROPS				.getProperty("au_col_internallicenseno"));		list.add(field);		return list;	}	/*	 * This method queries the authorities items table in the bizauthdb and	 * returns the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getItems() {		List<HashMap<String, String>> itemsData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_items")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("ai_col_items")));		itemsData = MSSQLHelper.getInstance().retrieveData(qrh);		return itemsData;	}	/*	 * This method queries the authorities foreign consignees table in the	 * 	 * bizauthdb and returns the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getForeignConsignee() {		List<HashMap<String, String>> fcData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_foreignconsignee")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("afc_col_foreignconsignee")));		fcData = MSSQLHelper.getInstance().retrieveData(qrh);		return fcData;	}	/*	 * This method queries the authorities Classifications table in the	 * 	 * bizauthdb and returns the data in the form of a treemap mapping to ilno	 * 	 * to classifications.	 */	public TreeMap<String, ArrayList<String>> getClassifications() {		List<HashMap<String, String>> classifyData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		TreeMap<String, ArrayList<String>> result = null;		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_classification")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("acy_col_classification")));		classifyData = MSSQLHelper.getInstance().retrieveData(qrh);		if (classifyData != null) {			result = new TreeMap<String, ArrayList<String>>();			for (HashMap<String, String> record : classifyData) {				String key = record.get(ILNO);				if (result.get(key) != null) {					result.get(key).add(record.get(CLASSIFCIATION));				} else {					ArrayList<String> classlist = new ArrayList<String>();					classlist.add(record.get(CLASSIFCIATION));					result.put(key, classlist);				}			}		}		return result;	}	/*	 * This method queries the authorities resources table in the bizauthdb and	 * 	 * returns the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getResources() {		List<HashMap<String, String>> resourceData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_resource")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("ar_col_resourceid")));		resourceData = MSSQLHelper.getInstance().retrieveData(qrh);		return resourceData;	}	/*	 * This method queries the authorities Country table in the bizauthdb and	 * 	 * returns the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getCountries() {		List<HashMap<String, String>> countryData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_countries")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("acy_col_country")));		countryData = MSSQLHelper.getInstance().retrieveData(qrh);		return countryData;	}	/*	 * This method queries the authorities User table in the bizauthdb and	 * 	 * returns the data in the form of list of hashmap of records.	 */	public List<HashMap<String, String>> getUsers() {		List<HashMap<String, String>> userData = new ArrayList<HashMap<String, String>>();		QueryResultHelper qrh = new QueryResultHelper();		qrh.setQuery(MessageFormat.format(PluginConstants.BASEQUERY,				PluginConstants.COMMON_PROPS						.getProperty("table_authority_users")));		qrh.setTableFieldList(getAuthorityChildTableFields(PluginConstants.COMMON_PROPS				.getProperty("aus_col_user")));		userData = MSSQLHelper.getInstance().retrieveData(qrh);		return userData;	}	/*	 * This method queries the authority and authority classifications table and	 * 	 * gets distinct jurisdiction and classification. IT returns a	 * 	 * Hashmap<Jurisdiction	 * 	 * ,HashMap<Classification,JurisdictionClassifcationCode>>.Add a null	 * 	 * classification and a jurisdiction classification code for every	 * 	 * jurisdiction.	 */	public HashMap<String, HashMap<String, Integer>> getJurisdictionClassifications() {		QueryResultHelper qrh = new QueryResultHelper();		Object[] args = {				PluginConstants.COMMON_PROPS.getProperty("au_col_jurisdiction"),				PluginConstants.COMMON_PROPS						.getProperty("acy_col_classification"),				PluginConstants.COMMON_PROPS.getProperty("table_authority"),				PluginConstants.COMMON_PROPS						.getProperty("table_authority_classification"),				PluginConstants.COMMON_PROPS.getProperty("alias_authority"),				PluginConstants.COMMON_PROPS						.getProperty("alias_authority_Classification"),				PluginConstants.COMMON_PROPS						.getProperty("au_col_internallicenseno"),				PluginConstants.COMMON_PROPS						.getProperty("acy_col_internallicenseno") };		qrh.setQuery(MessageFormat.format(PluginConstants.JURISDICTIONQUERY,				args));		qrh.getTableFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("acy_col_classification"));		qrh.getTableFieldList()				.add(PluginConstants.COMMON_PROPS						.getProperty("au_col_jurisdiction"));		List<HashMap<String, String>> jurisdictiondata = MSSQLHelper				.getInstance().retrieveData(qrh);		HashMap<String, HashMap<String, Integer>> jucidata = null;		if (jurisdictiondata != null) {			jucidata = new HashMap<String, HashMap<String, Integer>>();			int juclcount = 1;			for (HashMap<String, String> record : jurisdictiondata) {				String jurisdiction = null;				String classification = null;				if (record.get(CLASSIFCIATION) != null)					classification = record.get(CLASSIFCIATION).toLowerCase();				if (record.get(JURISDICTION) != null)					jurisdiction = record.get(JURISDICTION).toLowerCase();				if (jucidata.get(jurisdiction) == null) {					HashMap<String, Integer> map = new HashMap<String, Integer>();					map.put(classification, juclcount);					jucidata.put(jurisdiction, map);				} else {					jucidata.get(jurisdiction).put(classification, juclcount);				}				juclcount++;			}			/*			 * for (String key : jucidata.keySet()) {			 * 			 * jucidata.get(key).put(null, juclcount); juclcount++; }			 */		}		return jucidata;	}	/*	 * This method prepares a data that has to be send to client by calling its	 * 	 * subordinare prepare methods	 */	public void prepareData() {		try {			prepareJurisdictionClassification();			prepareAuthorityTable();			prepareAuthorityItemMapping();			prepareAuthorityCharacteristicsMapping();			prepareAuthorityResourceMapping();			prepareAuthorityForeignConsigneeMapping();			prepareAuthorityCountryMapping();			prepareAuthorityUserMapping();		} catch (Exception e) {			responseData = null;			log.error(					"Error in retriving the data from the BizAuthLicense database",					e);		}	}	/*	 * This method prepares a data that has to be used while preparing	 * 	 * cclcountry data	 */	public void prepareCCLBuildingData() {		try {			prepareJurisdictionClassification();			prepareAuthorityTable();		} catch (DataRetrivalFailureException e) {			responseData = null;			log.error(					"Error in retriving the data from the BizAuthLicense database",					e);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side AuthorityUserMapping Table.	 */	private void prepareAuthorityUserMapping()			throws DataRetrivalFailureException {		List<HashMap<String, String>> users = getUsers();		if (users != null) {			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_aaum"),					getAuthorityChildData(users, PluginConstants.COMMON_PROPS							.getProperty("aus_col_user"),							PluginConstants.COMMON_PROPS									.getProperty("aaum_col_UserId")));		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side AuthorityCountryMapping Table.	 */	private void prepareAuthorityCountryMapping()			throws DataRetrivalFailureException {		List<HashMap<String, String>> countries = getCountries();		if (countries != null) {			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_actm"),					getAuthorityChildData(countries,							PluginConstants.COMMON_PROPS									.getProperty("acy_col_country"),							PluginConstants.COMMON_PROPS									.getProperty("actm_col_CountryCode")));		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side AuthorityForeignConsigneeMapping Table.	 */	private void prepareAuthorityForeignConsigneeMapping()			throws DataRetrivalFailureException {		List<HashMap<String, String>> foreignConsignees = getForeignConsignee();		if (foreignConsignees != null) {			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_afsm"),					getAuthorityChildData(foreignConsignees,							PluginConstants.COMMON_PROPS									.getProperty("afc_col_foreignconsignee"),							PluginConstants.COMMON_PROPS									.getProperty("afsm_col_ForeignConsignee")));		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side AuthorityResourceMapping Table.	 */	private void prepareAuthorityResourceMapping()			throws DataRetrivalFailureException {		List<HashMap<String, String>> resources = getResources();		if (resources != null) {			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_arm"),					getAuthorityChildData(resources,							PluginConstants.COMMON_PROPS									.getProperty("ar_col_resourceid"),							PluginConstants.COMMON_PROPS									.getProperty("arm_col_Resource")));		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side AuthorityCharacteristicsMapping Table.	 */	private void prepareAuthorityCharacteristicsMapping()			throws DataRetrivalFailureException {		List<HashMap<String, String>> characteristics = getCharacteristics();		if (characteristics != null) {			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_acm"),					getAuthorityChildData(characteristics,							PluginConstants.COMMON_PROPS									.getProperty("ac_col_characteristics"),							PluginConstants.COMMON_PROPS									.getProperty("acm_col_Characteristich")));		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side AuthorityItemMapping Table.	 */	private void prepareAuthorityItemMapping()			throws DataRetrivalFailureException {		List<HashMap<String, String>> items = getItems();		if (items != null) {			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_aim"),					getAuthorityChildData(items, PluginConstants.COMMON_PROPS							.getProperty("ai_col_items"),							PluginConstants.COMMON_PROPS									.getProperty("au_col_ItemNo")));		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side Authority Table.	 */	private void prepareAuthorityTable() throws DataRetrivalFailureException {		ilnoClassificationMapping = getClassifications();		ilnoAuthoritiyIDMapping = new HashMap<String, ArrayList<Integer>>();		List<HashMap<String, String>> bizAuthAuthorityData = getAuthorities();		ArrayList<HashMap<String, String>> authorityTable = new ArrayList<HashMap<String, String>>();		juciCodeAuthorityIdMapping = new HashMap<Integer, ArrayList<Integer>>();		/*		 * log.info("jurisdictionClassificationMasterData: " +		 * 		 * jurisdictionClassificationMasterData);		 */		if (bizAuthAuthorityData != null && ilnoClassificationMapping != null) {			try {				int authid = 1;				for (HashMap<String, String> row : bizAuthAuthorityData) {					ArrayList<Integer> authidlist = new ArrayList<Integer>();					String iln = (String) row.get(ILNO);					String jurisdiction = null;					if (row.get(JURISDICTION) != null)						jurisdiction = row.get(JURISDICTION).toLowerCase();					ArrayList<String> classification = ilnoClassificationMapping							.get(iln);					// log.info("Jurisdiction: "+ jurisdiction);					// log.info("classification: "+ classification);					if (null != jurisdiction && null != classification) {						for (String classify : classification) {							classify = classify.toLowerCase();							authidlist.add(authid);							HashMap<String, String> saverow = new HashMap<String, String>(									row);							saverow.put(AUTHORITYID, Integer.toString(authid));							// log.info("Inside Classification loop:");							Integer juciCode = jurisdictionClassificationMasterData									.get(jurisdiction).get(classify);							// log.info("jucicode:"+ juciCode);							saverow.put(PluginConstants.COMMON_PROPS									.getProperty("au_col_JuCICode"), Integer									.toString(juciCode));							saverow.put(PluginConstants.COMMON_PROPS									.getProperty("au_col_AuthorityType"),									PluginConstants.COMMON_PROPS											.getProperty("lic_authority_type"));							// log.info("building juciCodeAuthorityIdMapping "+juciCodeAuthorityIdMapping+" authid:"+authid+" juciCode:"+juciCode);							addjuciCodeData(authid, juciCode);							// log.info("added newjuciCodeAuthorityIdMapping "+juciCodeAuthorityIdMapping);							saverow.remove(JURISDICTION);							authorityTable.add(saverow);							authid++;						}						ilnoAuthoritiyIDMapping.put(iln, authidlist);					} else {						authidlist.add(authid);						ilnoAuthoritiyIDMapping.put(iln, authidlist);						row.put(AUTHORITYID, Integer.toString(authid));						Integer juciCode = jurisdictionClassificationMasterData								.get(jurisdiction).get(null);						row.put(PluginConstants.COMMON_PROPS								.getProperty("au_col_JuCICode"), Integer								.toString(juciCode));						row.remove(JURISDICTION);						row.put(PluginConstants.COMMON_PROPS								.getProperty("au_col_AuthorityType"),								PluginConstants.COMMON_PROPS										.getProperty("lic_authority_type"));						authorityTable.add(row);						// log.info("building juciCodeAuthorityIdMapping "+juciCodeAuthorityIdMapping+" authid:"+authid+" juciCode:"+juciCode);						addjuciCodeData(authid, juciCode);						// log.info("building juciCodeAuthorityIdMapping "+juciCodeAuthorityIdMapping);						authid++;					}				}				responseData.put(						PluginConstants.COMMON_PROPS.getProperty("table_au"),						authorityTable);				log.info("Authority table has been prepared successfully");			} catch (Exception e) {				setErrorMessage(PluginConstants.DATARETRIVALFAILURE);				throw new DataRetrivalFailureException(						PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);			}		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	/* This method prepares a jurisdiction authority id mapping */	private void addjuciCodeData(int authid, Integer juciCode) {		if (juciCodeAuthorityIdMapping.get(juciCode) != null) {			juciCodeAuthorityIdMapping.get(juciCode).add(authid);		} else {			ArrayList<Integer> list = new ArrayList<Integer>();			list.add(authid);			juciCodeAuthorityIdMapping.put(juciCode, list);		}	}	/*	 * This method prepares a List of records for inserting these datas in the	 * 	 * client side JurisdictionClassification Table.	 */	private void prepareJurisdictionClassification()			throws DataRetrivalFailureException {		jurisdictionClassificationMasterData = getJurisdictionClassifications();		if (jurisdictionClassificationMasterData != null) {			jurisdictionClassificationTable = new ArrayList<HashMap<String, String>>();			log.info("keyset:" + jurisdictionClassificationMasterData.keySet());			Iterator<String> iterator = jurisdictionClassificationMasterData					.keySet().iterator();			/*			 * for (String jurisdiction : jurisdictionClassificationMasterData			 * .keySet())			 */			while (iterator.hasNext()) {				String jurisdiction = iterator.next();				log.info("DEBUG PWC HB jurisdiction " + jurisdiction);				log.info("DEBUG PWC HB classification:"						+ jurisdictionClassificationMasterData								.get(jurisdiction));				if (PluginConstants.COMMON_PROPS						.getProperty("ALLOW_EMPTY_JURISDICTION") != null						&& PluginConstants.COMMON_PROPS.getProperty(								"ALLOW_EMPTY_JURISDICTION").equalsIgnoreCase(								"true")) {					if (jurisdictionClassificationMasterData.get(jurisdiction) != null) {						Iterator<String> classifyiterator = jurisdictionClassificationMasterData								.get(jurisdiction).keySet().iterator();						/*						 * for (String classify						 * :jurisdictionClassificationMasterData						 * .get(jurisdiction).keySet() )						 */						while (classifyiterator.hasNext()) {							String classify = classifyiterator.next();							HashMap<String, String> record = new HashMap<String, String>();							record.put(JURISDICTION, jurisdiction);							record.put(CLASSIFCIATION, classify);							record.put(									PluginConstants.COMMON_PROPS											.getProperty("jcm_col_JuCICode"),									Integer.toString(jurisdictionClassificationMasterData											.get(jurisdiction).get(classify)));							jurisdictionClassificationTable.add(record);							log.info("DEBUG PWC HB record" + record);						}					}				} else {					if (jurisdiction != null) {						if (jurisdictionClassificationMasterData								.get(jurisdiction) != null) {							Iterator<String> classifyiterator = jurisdictionClassificationMasterData									.get(jurisdiction).keySet().iterator();							/*							 * for (String classify							 * :jurisdictionClassificationMasterData							 * .get(jurisdiction).keySet() )							 */							while (classifyiterator.hasNext()) {								String classify = classifyiterator.next();								HashMap<String, String> record = new HashMap<String, String>();								record.put(JURISDICTION, jurisdiction);								record.put(CLASSIFCIATION, classify);								record.put(										PluginConstants.COMMON_PROPS												.getProperty("jcm_col_JuCICode"),										Integer.toString(jurisdictionClassificationMasterData												.get(jurisdiction)												.get(classify)));								jurisdictionClassificationTable.add(record);								log.info("DEBUG PWC HB record" + record);							}						}					}				}			}			responseData.put(					PluginConstants.COMMON_PROPS.getProperty("table_jcm"),					jurisdictionClassificationTable);		} else {			setErrorMessage(PluginConstants.DATARETRIVALFAILURE);			throw new DataRetrivalFailureException(					PluginConstants.DATARETRIVALFAILUREEXCEPTIONMESSAGE);		}	}	private ArrayList<HashMap<String, String>> getAuthorityChildData(			List<HashMap<String, String>> collections, String ffieldName,			String tfieldName) {		ArrayList<HashMap<String, String>> result = new ArrayList<HashMap<String, String>>();		for (HashMap<String, String> row : collections) {			for (Integer authid : ilnoAuthoritiyIDMapping.get((String) row					.get(ILNO))) {				HashMap<String, String> map = new HashMap<String, String>();				map.put(tfieldName, row.get(ffieldName));				map.put(AUTHORITYID, Integer.toString(authid));				result.add(map);			}		}		return result;	}	public HashMap<String, HashMap<String, Integer>> getJurisdictionClassificationMasterData() {		return jurisdictionClassificationMasterData;	}	public void setJurisdictionClassificationMasterData(			HashMap<String, HashMap<String, Integer>> jurisdictionClassificationMasterData) {		this.jurisdictionClassificationMasterData = jurisdictionClassificationMasterData;	}	public ArrayList<HashMap<String, String>> getJurisdictionClassificationTable() {		return jurisdictionClassificationTable;	}	public void setJurisdictionClassificationTable(			ArrayList<HashMap<String, String>> jurisdictionClassificationTable) {		this.jurisdictionClassificationTable = jurisdictionClassificationTable;	}	public TreeMap<String, ArrayList<String>> getIlnoClassificationMapping() {		return ilnoClassificationMapping;	}	public void setIlnoClassificationMapping(			TreeMap<String, ArrayList<String>> ilnoClassificationMapping) {		this.ilnoClassificationMapping = ilnoClassificationMapping;	}	public HashMap<String, ArrayList<Integer>> getIlnoAuthoritiyIDMapping() {		return ilnoAuthoritiyIDMapping;	}	public void setIlnoAuthoritiyIDMapping(			HashMap<String, ArrayList<Integer>> ilnoAuthoritiyIDMapping) {		this.ilnoAuthoritiyIDMapping = ilnoAuthoritiyIDMapping;	}	public static void main(String[] args) {		try {			PluginConstants.PLUGIN_PROPS = PropertyLoader					.loadProperties(PluginConstants.PC_ROOT							+ PluginConstants.CONF_FOLDER							+ "/BizAuthIntegrationServer_HB.properties");			PluginConstants.COMMON_PROPS = PropertyLoader					.loadProperties(PluginConstants.PC_ROOT							+ PluginConstants.CONF_FOLDER							+ "/Common_HB.properties");			System.out.println(new AuthorityData().getData(new Date()));		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}}