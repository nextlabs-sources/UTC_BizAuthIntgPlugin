package com.nextlabs.hb.helper;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.hsqldb.Server;public class UserInsert {	private static final Log log = LogFactory.getLog(AuthorityInsert.class);	private HSQLHelper hsqlHelper;	HashMap<String, ArrayList<HashMap<String, String>>> responseData;	Server server;	public UserInsert(			HashMap<String, ArrayList<HashMap<String, String>>> responseData) {		this.responseData = responseData;		initializeHsqlHelper();	}	public UserInsert() {		initializeHsqlHelper();		log.info("Truncating the contents");	}	private void initializeHsqlHelper() {		hsqlHelper = new HSQLHelper(				PluginConstants.COMMON_PROPS.getProperty("hsql_server_url"),				PluginConstants.COMMON_PROPS.getProperty("hsql_user_name"),				PluginConstants.COMMON_PROPS.getProperty("hsql_password"),				PluginConstants.COMMON_PROPS						.getProperty("cgd_expiry_dateformat"));	}	public void insertData() {		long lCurrentTime = System.nanoTime();		log.info("User Insertion Starts");		insertUserData();		insertUserCountry();		insertUserauthority();		log.debug("user insertion timing.  Time spent: "				+ ((System.nanoTime() - lCurrentTime) / 1000000.00) + "ms");		System.gc();	}	public void truncateTable() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize("");		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_uam"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_ucm"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("table_user"));		hsqlHelper.truncatetables(iqh);	}	private void insertUserData() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_user"));		ArrayList<HashMap<String, String>> userdata = responseData.get(iqh				.getTableName());		if (userdata != null) {			log.info("PWC PROD TROUBLSHOOT LOG :" + userdata.size());			for (int i = 1; i < 10 && i < userdata.size(); i++) {				log.info("PWC PROD TROUBLSHOOT LOG first "+ i +" record:" + userdata.get(i));			}			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_WindowsSID"));			iqh.getFieldList()					.add(PluginConstants.COMMON_PROPS							.getProperty("user_col_UserID"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_usertype"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_FirstName"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_LastName"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_USPerson"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_CompanyId"));			iqh.getFieldList()					.add(PluginConstants.COMMON_PROPS							.getProperty("user_col_CGDESS"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("user_col_CGDEExpiration"));			iqh.prepareQuery();			hsqlHelper.insertDataWithDate(iqh, userdata);			userdata = null;		}	}	private void insertUserauthority() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_uam"));		ArrayList<HashMap<String, String>> userdata = responseData.get(iqh				.getTableName());		log.info("Inside User Authority" + userdata.size());		if (userdata != null) {			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("au_col_AuthorityId"));			iqh.getFieldList()					.add(PluginConstants.COMMON_PROPS							.getProperty("aaum_col_UserId"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("aaum_col_WindowsSID"));			iqh.prepareQuery();			hsqlHelper.insertData(iqh, userdata);			userdata = null;		}	}	private void insertUserCountry() {		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_ucm"));		log.info("inside insertUserCountry");		ArrayList<HashMap<String, String>> userdata = responseData.get(iqh				.getTableName());		if (userdata != null) {			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("ucm_col_countrycode"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS.getProperty("ucm_col_type"));			iqh.getFieldList()					.add(PluginConstants.COMMON_PROPS							.getProperty("aaum_col_UserId"));			iqh.getFieldList().add(					PluginConstants.COMMON_PROPS							.getProperty("aaum_col_WindowsSID"));			iqh.prepareQuery();			ArrayList<String> countryCodeList = hsqlHelper.getCountryCodes();			while (userdata.size() > 0) {				int endIndex = userdata.size() > 50000 ? 50000 : userdata						.size();				List<HashMap<String, String>> subList = new ArrayList<HashMap<String, String>>();				for (int i = 0; i < endIndex; i++) {					HashMap<String, String> record = userdata.get(i);					String countryCode = record							.get(PluginConstants.COMMON_PROPS									.getProperty("ucm_col_countrycode"));					if (countryCodeList != null) {						if (!countryCode.trim().isEmpty()								&& countryCodeList.contains(countryCode)) {							subList.add(record);						}					} else {						if (!countryCode.trim().isEmpty()) {							subList.add(record);						}					}				}				hsqlHelper.insertData(iqh, subList);				userdata.subList(0, endIndex).clear();			}			userdata = null;		}	}}