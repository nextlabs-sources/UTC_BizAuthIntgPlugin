package com.nextlabs.hb.helper;import java.text.MessageFormat;import java.util.ArrayList;import java.util.HashMap;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class CCLCountryInsert {	HashMap<String, ArrayList<HashMap<String, String>>> responseData;	private HSQLHelper hsqlHelper;	private static final Log log = LogFactory.getLog(AuthorityInsert.class);	public CCLCountryInsert() {	}	public CCLCountryInsert(			HashMap<String, ArrayList<HashMap<String, String>>> responseData) {		this.responseData = responseData;		hsqlHelper = new HSQLHelper(				PluginConstants.COMMON_PROPS.getProperty("hsql_server_url"),				PluginConstants.COMMON_PROPS.getProperty("hsql_user_name"),				PluginConstants.COMMON_PROPS.getProperty("hsql_password"),				PluginConstants.COMMON_PROPS.getProperty("BizAuthDateFormat"));	}	public void truncateContents() {		log.info("Inside Truncate contents");		String query = "DELETE FROM {0} WHERE {1} {2} {3}";		String subQuery = "SELECT {0} FROM {1} WHERE {2} = {3}";		Object[] actmDelete = {				PluginConstants.COMMON_PROPS.getProperty("table_actm"),				PluginConstants.COMMON_PROPS						.getProperty("actm_col_AuthorityId"),				"IN",				"("						+ MessageFormat								.format(subQuery,										PluginConstants.COMMON_PROPS												.getProperty("au_col_AuthorityId"),										PluginConstants.COMMON_PROPS												.getProperty("table_au"),										PluginConstants.COMMON_PROPS												.getProperty("au_col_AuthorityType"),										"'"												+ PluginConstants.COMMON_PROPS														.getProperty("ccl_authority_type")												+ "'") + ")" };		hsqlHelper.deleteContentsForCCLCountries(MessageFormat.format(query,				actmDelete));		log.info("After Truncating actm");		Object[] authorityDelete = {				PluginConstants.COMMON_PROPS.getProperty("table_au"),				PluginConstants.COMMON_PROPS						.getProperty("au_col_AuthorityType"),				"=",				"'"						+ PluginConstants.COMMON_PROPS								.getProperty("ccl_authority_type") + "'" };		hsqlHelper.deleteContentsForCCLCountries(MessageFormat.format(query,				authorityDelete));		log.info("After Truncating au");		Object[] jcmDelete = {				PluginConstants.COMMON_PROPS.getProperty("table_jcm"),				PluginConstants.COMMON_PROPS.getProperty("jcm_col_JuCICode"),				"NOT IN",				"("						+ MessageFormat								.format(subQuery,										PluginConstants.COMMON_PROPS												.getProperty("jcm_col_JuCICode"),										PluginConstants.COMMON_PROPS												.getProperty("table_au"),										PluginConstants.COMMON_PROPS												.getProperty("au_col_AuthorityType"),										"'"												+ PluginConstants.COMMON_PROPS														.getProperty("lic_authority_type")												+ "'") + ")" };		hsqlHelper.deleteContentsForCCLCountries(MessageFormat.format(query,				jcmDelete));		log.info("After Truncating jcm");	}	public void insertCCLCountries() {		ArrayList<HashMap<String, String>> jctable = new ArrayList<HashMap<String, String>>();		ArrayList<HashMap<String, String>> authoritydata = new ArrayList<HashMap<String, String>>();		ArrayList<HashMap<String, String>> authoritycountries = new ArrayList<HashMap<String, String>>();		ArrayList<HashMap<String, String>> cclData = responseData				.get(PluginConstants.COMMON_PROPS						.getProperty("table_cclCountries"));		ArrayList<String> countryCodeList = hsqlHelper.getCountryCodes();		String jurisdiction = PluginConstants.COMMON_PROPS				.getProperty("ccl_col_jurisdiction");		String classification = PluginConstants.COMMON_PROPS				.getProperty("ccl_col_classification");		InsertQueryHelper iqh = new InsertQueryHelper();		iqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_au"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("au_col_AuthorityId"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("au_col_AuthorityType"));		iqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("au_col_JuCICode"));		iqh.prepareQuery();		InsertQueryHelper jcmiqh = new InsertQueryHelper();		jcmiqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_jcm"));		jcmiqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("jcm_col_JuCICode"));		jcmiqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("jcm_col_Jurisdiction"));		jcmiqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("jcm_col_Classification"));		jcmiqh.prepareQuery();		InsertQueryHelper ccliqh = new InsertQueryHelper();		ccliqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_actm"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("actm_col_AuthorityId"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("actm_col_CountryCode"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("actm_col_ReasonForControl"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("actm_col_CCLFlag"));		ccliqh.prepareQuery();		if (cclData != null) {			truncateContents();			HashMap<String, HashMap<String, Integer>> jurisClassCode = hsqlHelper					.retrieveJurisdictionClassificationData();			if (jurisClassCode != null) {				int jucicount = jurisClassCode.get("count").get("count");				int authCount = hsqlHelper.getAuthCount();				for (HashMap<String, String> record : cclData) {					String jurisValue = null;					String classificationValue = null;					if (record.get(jurisdiction) != null)						jurisValue = record.get(jurisdiction).toLowerCase();					if (record.get(classification) != null)						classificationValue = record.get(classification)								.toLowerCase();					if (jurisClassCode.get(jurisValue) != null							&& jurisClassCode.get(jurisValue).get(									classificationValue) != null) {						int juciCode = jurisClassCode.get(jurisValue).get(								classificationValue);						if (record.get(ccliqh.getFieldList().get(1)).length() == 2								&& countryCodeList.contains(record.get(ccliqh										.getFieldList().get(1)))) {							int authid = ++authCount;							authoritydata.add(getAuthoritydataMap(juciCode,									authid, iqh));							authoritycountries.add(getAuthorityCountry(authid,									ccliqh, record));						}					} else {						/* log.info("record.get(ccliqh.getFieldList().get(1)))"						 * 						 * + record.get(ccliqh.getFieldList().get(1))); */						if (record.get(ccliqh.getFieldList().get(1)).length() == 2								&& countryCodeList.contains(record.get(ccliqh										.getFieldList().get(1)))) {							jucicount += 1;							if (jurisClassCode.get(jurisValue) != null) {								jurisClassCode.get(jurisValue).put(										classificationValue, jucicount);							} else {								HashMap<String, Integer> map = new HashMap<String, Integer>();								map.put(classificationValue, jucicount);								jurisClassCode.put(jurisValue, map);							}							jctable.add(getjctablemap(jurisValue,									classificationValue, jucicount, jcmiqh));							int authid = ++authCount;							authoritydata.add(getAuthoritydataMap(jucicount,									authid, iqh));							authoritycountries.add(getAuthorityCountry(authid,									ccliqh, record));						}					}				}				hsqlHelper.insertData(jcmiqh, jctable);				hsqlHelper.insertData(iqh, authoritydata);				hsqlHelper.insertData(ccliqh, authoritycountries);			}		}	}	private HashMap<String, String> getjctablemap(String jurisValue,			String classificationValue, int jucicount, InsertQueryHelper jcmiqh) {		HashMap<String, String> map = new HashMap<String, String>();		map.put(jcmiqh.getFieldList().get(0), Integer.toString(jucicount));		map.put(jcmiqh.getFieldList().get(1), jurisValue);		map.put(jcmiqh.getFieldList().get(2), classificationValue);		return map;	}	private HashMap<String, String> getAuthorityCountry(int authid,			InsertQueryHelper ccliqh, HashMap<String, String> record) {		HashMap<String, String> map = new HashMap<String, String>();		map.put(ccliqh.getFieldList().get(0), Integer.toString(authid));		map.put(ccliqh.getFieldList().get(1),				record.get(ccliqh.getFieldList().get(1)));		map.put(ccliqh.getFieldList().get(2),				record.get(ccliqh.getFieldList().get(2)));		map.put(ccliqh.getFieldList().get(3),				record.get(ccliqh.getFieldList().get(3)));		return map;	}	private HashMap<String, String> getAuthoritydataMap(int juciCode,			int authid, InsertQueryHelper iqh) {		HashMap<String, String> map = new HashMap<String, String>();		map.put(iqh.getFieldList().get(0), Integer.toString(authid));		map.put(iqh.getFieldList().get(1),				PluginConstants.COMMON_PROPS.getProperty("ccl_authority_type"));		map.put(iqh.getFieldList().get(2), Integer.toString(juciCode));		return map;	}	public static void main(String args[]) {		PluginConstants.COMMON_PROPS = PropertyLoader				.loadProperties(PluginConstants.PC_ROOT						+ PluginConstants.CONF_FOLDER + "/Common_HB.properties");		new CCLCountryInsert().truncateContents();		InsertQueryHelper ccliqh = new InsertQueryHelper();		ccliqh.initalize(PluginConstants.COMMON_PROPS.getProperty("table_actm"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("actm_col_AuthorityId"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("actm_col_CountryCode"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS						.getProperty("actm_col_ReasonForControl"));		ccliqh.getFieldList().add(				PluginConstants.COMMON_PROPS.getProperty("actm_col_CCLFlag"));		ccliqh.prepareQuery();		System.out.println(ccliqh.getQuery());	}}