package com.nextlabs.hb.helper;import java.io.IOException;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public abstract class DataRetrival {	private static final Log log = LogFactory.getLog(DataRetrival.class);	public abstract void prepareData();	public abstract Timestamp getLastModifiedDate();	HashMap<String, ArrayList<HashMap<String, String>>> responseData = new HashMap<String, ArrayList<HashMap<String, String>>>();	String filePath;	String ErrorMessage = PluginConstants.UPDATE;	public boolean isWriteHappened = false;	public void writeData() {		log.debug("inside writedata");		Timestamp fileModifiedDate = Utils.getFileModifiedDate(filePath);		Timestamp lastModifiedDBDate = getLastModifiedDate();		log.debug("getlastmodifieddb time" + lastModifiedDBDate);		log.debug("fileModifiedDate time" + fileModifiedDate);		if (fileModifiedDate != null && lastModifiedDBDate != null) {			if (lastModifiedDBDate.after(fileModifiedDate)) {				log.debug("The bin file time is after the db time");				prepareAndWriteObject();			}		} else {			log.debug("bin file is not created and has to be created");			prepareAndWriteObject();		}	}	private void prepareAndWriteObject() {		prepareData();		try {			Utils.writeData(responseData, filePath);			isWriteHappened = true;		} catch (IOException e) {			log.error("Error while writing object to file", e);		}	}	public HashMap<String, ArrayList<HashMap<String, String>>> getData(			Date modifiedTime) {		log.debug("inside readdata");		log.debug("Utils.getFileModifiedDate"				+ Utils.getFileModifiedDate(filePath));		log.debug("modifiedTime" + modifiedTime);		if (modifiedTime != null && Utils.getFileModifiedDate(filePath) != null) {			log.debug("Utils.getFileModifiedDate(filePath).after(modifiedTime)"					+ Utils.getFileModifiedDate(filePath).after(modifiedTime));			if (Utils.getFileModifiedDate(filePath).after(modifiedTime)) {				writeData();				if (!isWriteHappened) {					responseData = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils							.readData(filePath);				}				log.debug("bin file time is after the user time ");			} else {				log.debug("the client is in sync with the bin file, have to check bin file is in sync with the database");				writeData();				if (!isWriteHappened) {					setErrorMessage(PluginConstants.NOUPDATE);					return null;				}			}		} else {			log.debug("Data is missing at client side[time is null not updated properly in the table] or at serverside[bin file is removed]");			writeData();			if (!isWriteHappened)				responseData = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils						.readData(filePath);		}		if (responseData == null) {			setErrorMessage(PluginConstants.DATAREADFAILURE);		}		return responseData;	}	public HashMap<String, ArrayList<HashMap<String, String>>> getData() {		log.debug("Getting Data for CCL or IPMapping");		prepareAndWriteObject();		if (!isWriteHappened)			responseData = (HashMap<String, ArrayList<HashMap<String, String>>>) Utils					.readData(filePath);		if (responseData == null) {			setErrorMessage(PluginConstants.DATAREADFAILURE);		}		return responseData;	}	public HashMap<String, ArrayList<HashMap<String, String>>> getResponseData() {		return responseData;	}	public void setResponseData(			HashMap<String, ArrayList<HashMap<String, String>>> responseData) {		this.responseData = responseData;	}	public String getErrorMessage() {		return ErrorMessage;	}	public void setErrorMessage(String errorMessage) {		ErrorMessage = errorMessage;	}	public String getFilePath() {		return filePath;	}}